#version 410

in vec2 vUV;

out vec4 FragColour;

const float AMBIENT_STRENGTH = 0.7f;

uniform sampler2D Diffuse;
uniform sampler2D Ambient;
uniform sampler2D Specular;
//LightColour is used for the diffuse light map passed back by the light pass, and SpecPow is used for the specular light map passed back by the light pass.
//These variables are used to cut back on overhead in the C++ code.
uniform sampler2D LightColour;
uniform sampler2D SpecPow;

void main()
{
	vec3 diffuseLight = texture(LightColour, vUV).rgb;
	vec3 specLight = texture(SpecPow, vUV).rgb;
	vec3 diffuse = texture(Diffuse, vUV).rgb;
	vec3 ambient = texture(Ambient, vUV).rgb;
	vec3 specular = texture(Specular, vUV).rgb;

	FragColour =  vec4(ambient, 1) * AMBIENT_STRENGTH + vec4(diffuse * diffuseLight, 1) + vec4(specular * specLight, 1);
} 