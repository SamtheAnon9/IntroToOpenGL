#version 410

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

in vec3  vPosition[];
in float vLifeTime[];
in float vLifeSpan[];

out vec3 gColour;
out vec2 gUV;

uniform mat4  ProjectionView;
uniform mat4  CameraTransform;
uniform float SizeStart;
uniform float SizeEnd;
uniform vec4  ColourStart;
uniform vec4  ColourEnd;


uniform float zNear = 0.1f;
uniform float zFar = 175.0f;

uniform sampler2D DepthTexture;

void main()
{
	//Check to see if this particle should be drawn.
	
	//For starters, need to get this particle into camera space (projection view space?) so that I can convert it into a UV.
	vec4 uv = vec4(ProjectionView * vec4(vPosition[0], 1));
	vec3 colourUV = (((uv.xyz / uv.w) * 0.5f) + 0.5f);

	if (colourUV.z < texture(DepthTexture, vec2(colourUV)).r)
	{
		gColour = vec3(mix(ColourStart, ColourEnd, vLifeTime[0] / vLifeSpan[0]));

		float halfSize = mix(SizeStart, SizeEnd, vLifeTime[0] / vLifeSpan[0]) * 0.5f;
		
		vec3 corners[4];
		corners[0] = vec3(  halfSize, -halfSize, 0);
		corners[1] = vec3(  halfSize,  halfSize, 0);
		corners[2] = vec3( -halfSize, -halfSize, 0);
		corners[3] = vec3( -halfSize,  halfSize, 0);
		
		//Billboarding
		vec3 zAxis = normalize( CameraTransform[3].xyz - vPosition[0] );
		vec3 xAxis = cross( CameraTransform[1].xyz, zAxis );
		vec3 yAxis = cross( zAxis, xAxis );
		mat3 billboard = mat3(xAxis, yAxis, zAxis);
		
		//Make a quad

		gl_Position = ProjectionView * vec4( billboard * corners[0] + vPosition[0], 1 );
		gUV = vec2(1, 1);
		EmitVertex();
		gl_Position = ProjectionView * vec4( billboard * corners[1] + vPosition[0], 1 );
		gUV = vec2(1, 0);
		EmitVertex();
		gl_Position = ProjectionView * vec4( billboard * corners[2] + vPosition[0], 1 );
		gUV = vec2(0, 1);
		EmitVertex();
		gl_Position = ProjectionView * vec4( billboard * corners[3] + vPosition[0], 1 );
		gUV = vec2(0, 0);
		EmitVertex();
	}
}
