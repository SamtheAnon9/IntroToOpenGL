#version 410

out vec3 LightOutput;

//CameraPos is used to store the location of the light (variable names are re-used to make the C++ side of my code more efficient)
uniform vec3 LightMatrix;
uniform vec3 LightColour;
uniform vec3 CameraPos;
//Specular power should probably be handled per-surface, rather than per-light.
uniform float SpecPow;
//LightDir is used to store light radius.
uniform float LightDir;

//This stores positions, I just named it global to prevent me from having to make more Uniform Types in the C++ side.
uniform sampler2D Global;
uniform sampler2D Normal;

void main()
{
	vec2 uv = gl_FragCoord.xy / textureSize(Global, 0).xy;

	vec3 normal = normalize(texture(Normal, uv).xyz);
	vec3 position = texture(Global, uv).xyz;

	vec3 toLight = LightMatrix - position;
	float falloff = 1 - min(1, length(toLight) / LightDir);

	//Diffuse
	float d = max(0, dot(normal, toLight));

	//Specular
	vec3 E = normalize( CameraPos - position );
	vec3 R = reflect( -toLight, normal );
	float s = max( 0, dot( R, E ) );
	s = pow( s, SpecPow );

	LightOutput = (LightColour * d + LightColour * s) * falloff;

	LightOutput /= 3;
}