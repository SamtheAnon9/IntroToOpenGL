#version 410

layout( location = 0 ) in vec3 Position;
layout( location = 1 ) in vec3 Velocity;
layout( location = 2 ) in float LifeTime;
layout( location = 3 ) in float LifeSpan;

out vec3  vPosition;
out vec3  vVelocity;
out float vLifeTime;
out float vLifeSpan;

uniform float Time;
uniform float DeltaTime;
uniform float LifeMin;
uniform float LifeMax;
uniform float VelocityMin;
uniform float VelocityMax;
uniform float DirectionVariance;
uniform vec3 EmitterPosition;
uniform vec3 OtherEmitterPosition;
uniform vec3 EmitterDirection;


const float INVERSE_MAX_UINT = 1.0f / 4294967295.0f;
const float PI = 3.14159265358979f;

//Random number code by Robert Bridson, co-author of "Fluid Simulation for Computer Graphics"
float rand(uint seed, float range) 
{
	uint i = (seed ^ 12345391u) * 2654435769u;
	i ^= (i << 6u) ^ (i >> 26u);
	i *= 2654435769u;
	i += (i << 5u) ^ (i >> 12u);
	return float(range * i) * INVERSE_MAX_UINT;
} 

void main()
{
	vPosition = Position + Velocity * DeltaTime;
	vVelocity = Velocity;
	vLifeTime = LifeTime + DeltaTime;
	vLifeSpan = LifeSpan;

	float depth;
	
	if (vLifeTime > vLifeSpan)
	{
		uint seed = uint(Time * 1000) + uint(gl_VertexID);

		//Pick a random, uniformly distributed point on a circle.
		float randX = rand(seed++, DirectionVariance * 2) - DirectionVariance;
		float randY = rand(seed++, DirectionVariance * 2) - DirectionVariance;
		while (randX * randX + randY * randY > DirectionVariance * DirectionVariance)
		{
			randX = rand(seed++, DirectionVariance * 2) - DirectionVariance;
			randY = rand(seed++, DirectionVariance * 2) - DirectionVariance;
		}

		vec3 randDir = vec3(cos(randY) * cos(randX), sin(randY), sin(randX));

		vec3 right = cross(vec3(0, 1, 0), EmitterDirection);
		vec3 up = cross(EmitterDirection, right);
		//Renormalize for incase warping has occured.
		right = normalize(right);
		up = normalize(up);
		mat3 transformMatrix = mat3(EmitterDirection, up, right);
		vVelocity = vec3(transformMatrix * randDir);

		//Maybe I could fix this by multiplying by another matrix after transformMatrix.


		vVelocity = (rand(seed++, VelocityMax - VelocityMin) + VelocityMin) * normalize(vVelocity);
		vPosition = EmitterPosition + (OtherEmitterPosition - EmitterPosition) * vec3(rand(seed++, 1), rand(seed++, 1), rand(seed++, 1));
		vLifeTime = 0;
		vLifeSpan = rand(seed++, LifeMax - LifeMin) + LifeMin;
	}
}
