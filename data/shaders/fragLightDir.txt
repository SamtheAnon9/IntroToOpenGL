#version 410

in vec2 vUV;

layout(location = 0) out vec3 DiffuseOutput;
layout(location = 1) out vec3 SpecularOutput;

uniform vec3 LightDir;
uniform vec3 LightColour;
uniform vec3 CameraPos;
uniform float SpecPow;
//I use LightMatrix to represent light strength.
uniform float LightMatrix;

//This stores positions, I just named it global to prevent me from having to make more Uniform Types in the C++ side.
uniform sampler2D Global;
uniform sampler2D Normal;

void main()
{
	vec3 normal = texture(Normal, vUV).xyz;

	if (normal != vec3(0, 0, 0))
	{
		normal = normalize(normal);

		vec3 position = texture(Global, vUV).xyz;

		//Diffuse
		float  d = max(0, dot(normal, -LightDir));

		DiffuseOutput = LightColour * d * LightMatrix;

		//Specular
		vec3 E = normalize( CameraPos - position );
		vec3 R = reflect( LightDir, normal );
		float s = max( 0, dot( R, E ) );
		s = pow( s, SpecPow );
		SpecularOutput = LightColour * s * LightMatrix;
	}
	else
	{
		DiffuseOutput = LightColour * LightMatrix;
		SpecularOutput = LightColour * pow(LightMatrix, SpecPow);
	}
}