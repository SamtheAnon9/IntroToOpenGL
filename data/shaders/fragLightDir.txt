#version 410

in vec2 vUV;

layout(location = 0) out vec3 diffuseOutput;
layout(location = 1) out vec3 specularOutput;

uniform vec3 LightDir;
uniform vec3 LightColour;
uniform vec3 CameraPos;
uniform float SpecPow;

//This stores positions, I just named it global to prevent me from having to make more Uniform Types in the C++ side.
uniform sampler2D Global;
uniform sampler2D Normal;

void main()
{
	vec3 normal = normalize(texture(Normal, vUV).xyz);
	vec3 position = texture(Global, vUV).xyz;

	//Diffuse
	float d = max(0, dot(normal, -LightDir));
	diffuseOutput = LightColour * d * 0.5f;

	//Specular
	vec3 E = normalize( CameraPos - position );
	vec3 R = reflect( LightDir, normal );
	float s = max( 0, dot( R, E ) );
	s = pow( s, SpecPow );
	specularOutput = LightColour * s * 0.5f;
}