#version 410

in vec3 vPosition;
in vec3 vColour;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;

in vec2 vTexCoord;

out vec4 FragColour;

uniform sampler2D Diffuse;
uniform sampler2D Normal;
uniform sampler2D Specular;

uniform vec3 LightDir;
uniform vec3 LightColour;
uniform vec3 CameraPos;
uniform float SpecPow;

void main() { 
	mat3 TBN = mat3(normalize(vTangent), normalize(vBiTangent), normalize(vNormal));
	vec3 N = texture(Normal, vTexCoord).xyz * 2 - 1;

	float d = max(0, dot( normalize(TBN * N), normalize(LightDir) ) );
	vec3 E = normalize( CameraPos - vPosition );
	vec3 R = reflect( -LightDir, vNormal );
	float s = texture(Specular, vTexCoord).xyz * max( 0, dot ( R, E ) );
	s = pow( s, SpecPow );
	
	FragColour = texture( Diffuse, vTexCoord) * vec4(vColour, 1) * vec4( LightColour * d + LightColour * s, 1);
}

	