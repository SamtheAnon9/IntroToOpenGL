#version 410

layout( location = 0 ) in vec3 Position;
layout( location = 1 ) in vec3 Velocity;
layout( location = 2 ) in float LifeTime;
layout( location = 3 ) in float LifeSpan;

out vec3  vPosition;
out vec3  vVelocity;
out float vLifeTime;
out float vLifeSpan;

uniform float Time;
uniform float DeltaTime;
uniform float LifeMin;
uniform float LifeMax;
uniform float VelocityMin;
uniform float VelocityMax;
uniform float DirectionVariance;
uniform vec3 EmitterPosition;
uniform vec3 EmitterDirection;

const float INVERSE_MAX_UINT = 1.0f / 4294967295.0f;
const float PI = 3.14159265358979f;

//Random number code by Robert Bridson, co-author of "Fluid Simulation for Computer Graphics"
float rand(uint seed, float range) 
{
	uint i = (seed ^ 12345391u) * 2654435769u;
	i ^= (i << 6u) ^ (i >> 26u);
	i *= 2654435769u;
	i += (i << 5u) ^ (i >> 12u);
	return float(range * i) * INVERSE_MAX_UINT;
} 

void main()
{
	vPosition = Position + Velocity * DeltaTime;
	vVelocity = Velocity;
	vLifeTime = LifeTime + DeltaTime;
	vLifeSpan = LifeSpan;
	
	if (vLifeTime > vLifeSpan)
	{
		uint seed = uint(Time * 1000) + uint(gl_VertexID);

		//Here I calculate the direction the particle is emitted at.
		//This looks very helpful- remember this link http://stackoverflow.com/questions/20923232/how-to-rotate-a-vector-by-a-given-direction

		//First, pick a random point on a disk. See here: http://mathworld.wolfram.com/DiskPointPicking.html
		//float randAngle = rand(seed++, 2 * PI);
		//float randMagnitude = rand(seed++, DirectionVariance);
		//float randX = randMagnitude * cos(randAngle);
		//float randY = randMagnitude * sin(randAngle);
		////Now calculate the direction in polar form. TODO: Change this to be passed in in polar form, don't need to do this for every particle. 
		////Something is wrong somewhere below this point- the direction vector is not being properly taken into account.
		////The 'z' component of the direction vector seems to have no effect at all- this is clearest when creating a direction vector parallel to the z-axis. This produces the same result as a zero vector (a single particle).
		//float dirPhi = atan(EmitterDirection.y, EmitterDirection.x);
		//float dirTheta = acos(EmitterDirection.z);
		////float dirTheta = atan(EmitterDirection.x, EmitterDirection.z);	//These two lines give an alternate spherical coordinate system (and it's the one that makes the most sense to me), 
		////float dirPhi = asin(EmitterDirection.y);						//however the above two lines are being used instead because they work for the x and y axis (easier to differentiate than x and z).
		////Now put the disk into direction space.
		////Here is the issue- I shouldn't just add randX and Y to phi and theta- randX and randY should be added to the vectors orthogonal to direction.
		//float phi = dirPhi + randX;
		//float theta = dirTheta + randY;
		////Now, convert back to cartesian coordinates.
		//vVelocity = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
		

		//float alpha = rand(seed++, DirectionVariance);
		//alpha = alpha * 2 - DirectionVariance;
		//float beta = rand(seed++, DirectionVariance);
		//beta = beta * 2 - DirectionVariance;
		//vec3 randDir = vec3(cos(alpha), 0, sin(alpha)) + vec3(cos(beta), sin(beta), 0);
		//
		//Instead of the commented out polar form code above, find the vectors orthonormal with direction.
		//vec3 right = cross(vec3(0, 1, 0), EmitterDirection);
		//vec3 up = cross(EmitterDirection, right);
		////Renormalize for incase warping has occured.
		//right = normalize(right);
		//up = normalize(up);
		//mat3 transformMatrix = mat3(right, up, EmitterDirection);
		//vVelocity = transformMatrix * randDir;


		//Refer to two circle diagram in notebook for thinking behind this approach.
		//float alpha = rand(seed++, DirectionVariance);
		//alpha = alpha * 2 - DirectionVariance;
		//float beta = rand(seed++, DirectionVariance);
		//beta = beta * 2 - DirectionVariance;
		//float dirAlpha =  atan(EmitterDirection.z, EmitterDirection.x);
		//float dirBeta = atan(EmitterDirection.y, EmitterDirection.x);
		//float newAlpha = alpha + dirAlpha;
		//float newBeta = beta + dirBeta;
		//vVelocity = vec3(cos(newAlpha), 0, sin(newAlpha)) + vec3(cos(newBeta), sin(newBeta), 0);

		float randAngle = rand(seed++, 2 * PI);
		float randMagnitude = rand(seed++, DirectionVariance);
		float randX = randMagnitude * cos(randAngle);
		float randY = randMagnitude * sin(randAngle);
		//Possibly change this line, not sure if correct.
		vec3 randDir = vec3(cos(randY), 0, sin(randY)) + vec3(cos(randX), sin(randX), 0);
		
		//Instead of the commented out polar form code above, find the vectors orthonormal with direction.
		vec3 right = cross(vec3(0, 1, 0), EmitterDirection);
		vec3 up = cross(EmitterDirection, right);
		//Renormalize for incase warping has occured.
		right = normalize(right);
		up = normalize(up);
		mat3 transformMatrix = mat3(right, up, EmitterDirection);
		vVelocity = transformMatrix * randDir;


		vVelocity = (rand(seed++, VelocityMax - VelocityMin) + VelocityMin) * normalize(vVelocity);
		vPosition = EmitterPosition;
		vLifeTime = 0;
		vLifeSpan = rand(seed++, LifeMax - LifeMin) + LifeMin;
	}
}
